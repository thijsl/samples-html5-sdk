!function(e){var t={};function a(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)a.d(n,i,function(t){return e[t]}.bind(null,i));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,a){"use strict";function n(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}a.r(t);var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,a,i;return t=e,i=[{key:"downloadURI",value:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,a.click()}},{key:"slug",value:function(e){return e.toLowerCase().replace(/ /g,"-").replace(/[^\w-]+/g,"")}}],(a=null)&&n(t.prototype,a),i&&n(t,i),e}();function r(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.tab=t,this.index=a}var t,a,n;return t=e,n=[{key:"createNode",value:function(t,a){return new e(t,a).getNode()}}],(a=[{key:"getNode",value:function(){var e=i.slug(this.tab.name),t=document.createElement("li"),a=document.createElement("a");return a.className="nav-link",0==this.index&&a.classList.add("active"),a.id=e+"-tab",a.setAttribute("data-toggle","tab"),a.setAttribute("aria-controls",e),a.setAttribute("role","tab"),a.setAttribute("aria-selected",0==this.index?"true":"false"),a.href="#"+e,a.setAttribute("data-index",this.index),a.textContent=this.tab.name.toUpperCase(),t.className="nav-item",t.appendChild(a),t}}])&&r(t.prototype,a),n&&r(t,n),e}();function s(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.tab=t,this.index=a}var t,a,n;return t=e,n=[{key:"createNode",value:function(t,a){return new e(t,a).getNode()}}],(a=[{key:"getNode",value:function(){var e=i.slug(this.tab.name),t=document.createElement("div");t.className="tab-pane fade",0==this.index&&(t.classList.add("show"),t.classList.add("active")),t.id=e,t.setAttribute("role","tabpanel"),t.setAttribute("aria-labelledby",e+"-tab");var a=document.createElement("div");a.className="form p-3",t.appendChild(a);var n=document.createElement("div");n.className="float-right mt-1",n.innerHTML='<button type="button" class="btn btn-default reset_demo"><i class="fas fa-sync-alt mr-2"></i></button>',a.appendChild(n);var r=document.createElement("div");r.className="float-right mt-1",r.innerHTML='<button type="button" class="btn btn-default edit_demo" data-toggle="modal" data-target="#editAppModal"><i class="fas fa-cog mr-2"></i></button>',a.appendChild(r);var o=document.createElement("div");if(o.className="float-right mt-1",o.innerHTML='<a href="https://github.com/THEOplayer/samples-html5-sdk/tree/master/reference-apps/verizon-media-app" target="_blank" type="button" class="btn btn-default"><i class="fab fa-github mr-2"></i></a>',a.appendChild(o),this.tab.config&&this.tab.config.general){var s=this.tab.config.general,l=document.createElement("p");if(l.className="text-muted mt-2",l.setAttribute("data-local","general"),l.textContent="General",a.appendChild(l),s.indexOf("coming-up-notification")>-1){var d=document.createElement("div");d.className="switch",d.innerHTML='<label><input id="'+e+'_contentNotification" type="checkbox" data-verizonconfig="contentNotification" checked><span data-local="cun">Coming up notification</span></label>',a.appendChild(d)}if(s.indexOf("ad-notification")>-1){var c=document.createElement("div");c.className="switch",c.innerHTML='<label><input id="'+e+'_adNotification" type="checkbox" data-verizonconfig="adNotification" checked><span data-local="an">Ad notification</span></label>',a.appendChild(c)}if(s.indexOf("show-asset-markers")>-1){var u=document.createElement("div");u.className="switch",u.innerHTML='<label><input id="'+e+'_assetMarkers" type="checkbox" data-verizonconfig="assetMarkers" checked><span data-local="am">Show asset markers</span></label>',a.appendChild(u)}if(s.indexOf("show-ad-break-markers")>-1){var f=document.createElement("div");f.className="switch",f.innerHTML='<label><input id="'+e+'_adBreakMarkers" type="checkbox" data-verizonconfig="adBreakMarkers" checked><span data-local="abm">Show ad break markers</span></label>',a.appendChild(f)}}if(this.tab.config&&this.tab.config["skip-offset"]){var p=document.createElement("div");p.className="form",p.innerHTML='<div class="form-group"><label for="'+e+'_skipOffset" data-local="so">Skip Offset</label><input type="number" class="form-control" id="'+e+'_skipOffset" placeholder="'+this.tab.config["skip-offset"]+'" min="-1" max="15" ></div>',a.appendChild(p)}if(this.tab.config&&this.tab.config["seek-over-ad"]){this.tab.config["seek-over-ad"];var v=document.createElement("p");v.className="text-muted mt-2",v.setAttribute("data-local","soa"),v.textContent="Seek over Ad",a.appendChild(v);var h=document.createElement("form");h.innerHTML='<div class="form-group pt-0">\n                                    <div class="radio form-check-inline">\n                                        <label>\n                                            <input type="radio" name="optionsRadios" id="'+e+'_optionsRadios1"\n                                                value="play-all" checked>\n                                             <span data-local="pa">Play all</span>\n                                        </label>\n                                    </div>\n                                    <div class="radio form-check-inline">\n                                        <label>\n                                            <input type="radio" name="optionsRadios" id="'+e+'_optionsRadios2"\n                                                value="play-none">\n                                            <span data-local="pn">Play none</span>\n                                        </label>\n                                    </div>\n                                    <div class="radio form-check-inline">\n                                        <label>\n                                            <input type="radio" name="optionsRadios" id="'+e+'_optionsRadios3"\n                                                value="play-last">\n                                            <span data-local="pl">Play last</span>\n                                        </label>\n                                    </div>\n                                </div>',a.appendChild(h)}if(this.tab.config&&this.tab.config.queue){var m=document.createElement("button");m.className="btn btn-default w-100 text-left",m.setAttribute("data-toggle","collapse"),m.href="#playlist_"+e,m.textContent="Queue",m.setAttribute("aria-expanded","true"),m.setAttribute("aria-controls","playlist_"+e),t.appendChild(m);var g=document.createElement("div");g.className="collapse show",g.id="playlist_"+e,t.appendChild(g)}return t}}])&&s(t.prototype,a),n&&s(t,n),e}();function d(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,a,n;return t=e,n=[{key:"createAll",value:function(e){for(var t=0;t<e.length;t++)this.insertTab(e[t],t)}},{key:"insertTab",value:function(e,t){var a=document.querySelector("#myTab"),n=o.createNode(e,t);a.appendChild(n);var i=document.querySelector("#myTabContent"),r=l.createNode(e,t);i.appendChild(r)}},{key:"destroyAll",value:function(){document.querySelector("#myTab").innerHTML="",document.querySelector("#myTabContent").innerHTML=""}}],(a=null)&&d(t.prototype,a),n&&d(t,n),e}();function u(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,a,n;return t=e,n=[{key:"localizeAppAppCopyright",value:function(e,t){var a=this.getLanguageFromQueryParams()||t;if(a){var n=this.getAppLocalizationMap();for(var i in n){var r=document.querySelectorAll('[data-local="'+i+'"]');if(n[i][a]&&r&&r.length>0)for(var o=0;o<r.length;o++)r[o].innerText=n[i][a]}}}},{key:"getAppLocalizationMap",value:function(){return{general:{en:"General",es:"Configuración",ja:"構成",nl:"Algemeen"},cun:{en:"Coming up notification",es:"Notificación de contenido",ja:"コンテンツ通知",nl:"Video notificatie"},am:{en:"Show asset markers",es:"Marcadores de activos",ja:"アセットマーカー",nl:"Video markeringen"},an:{en:"Ad notification",es:"Notificación de publicidad",ja:"広告通知",nl:"Advertentie notificatie"},queue:{en:"Queue",es:"Cola",ja:"キュー",nl:"Lijst"},abm:{en:"Show ad break markers",es:"Marcadores publicitarios",ja:"広告マーカー",nl:"Advertentie markeringen"},so:{en:"Skip Offset",es:"Saltar desplazamiento",ja:"オフセットをスキップ",nl:"Advertenties Overslaan"},soa:{en:"Seek Over Ad",es:"Buscar Anuncio",ja:"広告を探す",nl:"Zoeken Voorbij Ads"},pa:{en:"Play all",es:"Todos",ja:"すべて",nl:"Alle"},pn:{en:"Play none",es:"Ninguna",ja:"なし",nl:"Geen"},pl:{en:"Play last",es:"Última",ja:"最終",nl:"Laatste"},configuration:{en:"Configuration",es:"Configuración",ja:"構成",nl:"Instellingen"},download:{en:"Download",es:"Descargar",ja:"ダウンロード",nl:"Download"},reset:{en:"Reset",es:"Reiniciar",ja:"リセット",nl:"Herstellen"},save:{en:"Save changes",es:"Salvar",ja:"セーブ",nl:"Opslaan"}}}},{key:"getLanguageFromQueryParams",value:function(){var e=function(e){var t=window.location.href;e=e.replace(/[\[\]]/g,"\\$&");var a=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return a?a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):"":null}("lang");return e&&e.toLowerCase()}},{key:"getSelectedLanguage",value:function(e,t){var a=this.getLanguageFromQueryParams()||t,n=this.getVjsLanguage(a);return n&&THEOplayer.videojs.addLanguage(a,n),n&&a}},{key:"getVjsLanguage",value:function(e){return{es:{Play:"Reproducción",Pause:"Pausa","Current Time":"Tiempo reproducido","Duration Time":"Duración total","Remaining Time":"Tiempo restante","Stream Type":"Tipo de secuencia",LIVE:"DIRECTO",Loaded:"Cargado",Progress:"Progreso",Fullscreen:"Pantalla completa","Non-Fullscreen":"Pantalla no completa",Mute:"Silenciar",Unmute:"No silenciado","Playback Rate":"Velocidad de reproducción",Subtitles:"Subtítulos","subtitles off":"Subtítulos desactivados",Captions:"Subtítulos especiales","captions off":"Subtítulos especiales desactivados",Chapters:"Capítulos","You aborted the media playback":"Ha interrumpido la reproducción del vídeo.","A network error caused the media download to fail part-way.":"Un error de red ha interrumpido la descarga del vídeo.","The media could not be loaded, either because the server or network failed or because the format is not supported.":"No se ha podido cargar el vídeo debido a un fallo de red o del servidor o porque el formato es incompatible.","The media playback was aborted due to a corruption problem or because the media used features your browser did not support.":"La reproducción de vídeo se ha interrumpido por un problema de corrupción de datos o porque el vídeo precisa funciones que su navegador no ofrece.","No compatible source was found for this media.":"No se ha encontrado ninguna fuente compatible con este vídeo.",Settings:"Configuración"},ja:{Play:"再生",Pause:"一時停止","Current Time":"現在の時間","Duration Time":"長さ","Remaining Time":"残りの時間","Stream Type":"ストリームの種類",LIVE:"ライブ",Loaded:"ロード済み",Progress:"進行状況",Fullscreen:"フルスクリーン","Non-Fullscreen":"フルスクリーン以外",Mute:"ミュート",Unmute:"ミュート解除","Playback Rate":"再生レート",Subtitles:"サブタイトル","subtitles off":"サブタイトル オフ",Captions:"キャプション","captions off":"キャプション オフ",Chapters:"チャプター","You aborted the media playback":"動画再生を中止しました","A network error caused the media download to fail part-way.":"ネットワーク エラーにより動画のダウンロードが途中で失敗しました","The media could not be loaded, either because the server or network failed or because the format is not supported.":"サーバーまたはネットワークのエラー、またはフォーマットがサポートされていないため、動画をロードできませんでした","The media playback was aborted due to a corruption problem or because the media used features your browser did not support.":"破損の問題、またはお使いのブラウザがサポートしていない機能が動画に使用されていたため、動画の再生が中止されました","No compatible source was found for this media.":"この動画に対して互換性のあるソースが見つかりませんでした",Settings:"構成"},nl:{Play:"Afspelen",Pause:"Pauze","Current Time":"Huidige tijd","Duration Time":"Looptijd","Remaining Time":"Resterende tijd","Stream Type":"Streamtype",LIVE:"LIVE",Loaded:"Geladen",Progress:"Status",Fullscreen:"Volledig scherm","Non-Fullscreen":"Geen volledig scherm",Mute:"Geluid uit",Unmute:"Geluid aan","Playback Rate":"Weergavesnelheid",Subtitles:"Ondertiteling","subtitles off":"ondertiteling uit",Captions:"Bijschriften","captions off":"bijschriften uit",Chapters:"Hoofdstukken",Descriptions:"Beschrijvingen","descriptions off":"beschrijvingen off","You aborted the media playback":"U hebt de mediaweergave afgebroken.","A network error caused the media download to fail part-way.":"De mediadownload is mislukt door een netwerkfout.","The media could not be loaded, either because the server or network failed or because the format is not supported.":"De media kon niet worden geladen, vanwege een server- of netwerkfout of doordat het formaat niet wordt ondersteund.","The media playback was aborted due to a corruption problem or because the media used features your browser did not support.":"De mediaweergave is afgebroken vanwege beschadigde data of het mediabestand gebruikt functies die niet door uw browser worden ondersteund.","No compatible source was found for this media.":"Voor deze media is geen ondersteunde bron gevonden.","Play Video":"Video Afspelen",Close:"Sluiten","Modal Window":"Modal Venster","This is a modal window":"Dit is een modaal venster","This modal can be closed by pressing the Escape key or activating the close button.":"Dit modaal venster kan gesloten worden door op Escape te drukken of de 'sluiten' knop te activeren.",", opens captions settings dialog":", opent bijschriften instellingen venster",", opens subtitles settings dialog":", opent ondertiteling instellingen venster",", opens descriptions settings dialog":", opent beschrijvingen instellingen venster",", selected":", selected",Settings:"Instellingen"}}[e]}}],(a=null)&&u(t.prototype,a),n&&u(t,n),e}();function p(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var v=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.app=t,this.init()}var t,a,n;return t=e,(a=[{key:"init",value:function(){var e=this.app;this.initSaveButtonListener(),this.initResetButtonListener(),this.initDownloadButtonListener();var t=localStorage.getItem("appConfig");t&&(t=JSON.parse(t),e.appConfig=t),document.querySelector("#editAppModal textarea").value=JSON.stringify(e.appConfig,null,"\t")}},{key:"initSaveButtonListener",value:function(){var e=this.app;document.querySelector("#save-app-config").addEventListener("click",(function(t){var a=document.querySelector("#editAppModal textarea");a&&(a=JSON.parse(a.value),localStorage.setItem("appConfig",JSON.stringify(a)),c.destroyAll(),e.appConfig=a,e.init(),$(".switch").bootstrapMaterialDesign())}))}},{key:"initResetButtonListener",value:function(){document.querySelector("#reset-app-config").addEventListener("click",(function(e){localStorage.removeItem("appConfig"),location.reload()}))}},{key:"initDownloadButtonListener",value:function(){document.querySelector("#download-app-config").addEventListener("click",(function(e){var t=document.querySelector("#editAppModal textarea");if(t){t=JSON.stringify(JSON.parse(t.value),null,"\t");var a=new Blob([t],{type:"application/json"}),n=window.URL.createObjectURL(a);i.downloadURI(n,"verizonAppConfig.json")}}))}}])&&p(t.prototype,a),n&&p(t,n),e}();function h(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var m=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,a,n;return t=e,n=[{key:"addItem",value:function(e,t,a){var n="<button class='btn btn-default w-100 text-left mb-3' id='item_"+e.asset+"'><div class='media'><img src='"+e.poster_url+"'class='mr-3' alt='"+e.desc+"'><div class='media-body'>"+e.desc+"</div></div></button>",i=document.createElement("div");i.onclick=e.clickCallback,i.innerHTML=n;var r="playlist_"+a,o=document.getElementById(r);o&&o.appendChild(i)}},{key:"clear",value:function(e,t){var a="playlist_"+t,n=document.getElementById(a);n&&(n.innerHTML="")}},{key:"updateActiveItem",value:function(e){for(var t=document.querySelectorAll(".media"),a=0;a<t.length;a++)t[a].parentNode.classList.remove("active-asset");var n=document.querySelectorAll(".tab-pane.active .media")[e.index];n&&n.parentNode.classList.add("active-asset"),document.querySelector("#currentAssetDescription").innerText=e.resource.description}}],(a=null)&&h(t.prototype,a),n&&h(t,n),e}();function g(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var y=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.app=t,this.theoplayerRef=void 0,this.playlist=void 0,this.adBreaks=[]}var t,a,n;return t=e,(a=[{key:"initPlayer",value:function(e){var t=this,a=this.app;t.playlist=[],m.clear(a.sourceIndex,i.slug(a.appConfig.tabs[a.sourceIndex].name)),this.theoplayerRef&&this.theoplayerRef.destroy();var n=document.querySelector(".theoplayer-container");this.createTHEOplayerInfo(n),this.theoplayerRef=new THEOplayer.Player(n,{libraryLocation:"//cdn.theoplayer.com/dash/theoplayer/",verizonMedia:{onSeekOverAd:a.config.verizon.seekOverAd,ui:{contentNotification:a.config.verizon.contentNotification,adNotification:a.config.verizon.adNotification,assetMarkers:a.config.verizon.assetMarkers,adBreakMarkers:a.config.verizon.adBreakMarkers},defaultSkipOffset:a.config.verizon.defaultSkipOffset},ui:{language:f.getSelectedLanguage(a,a.appConfig.language)},persistVolume:!0}),this.createCustomIcon(this.theoplayerRef),this.theoplayerRef.autoplay=!0,this.theoplayerRef.preload="auto";var r=this.getSource(e);if(this.isLiveStream(r)){n.classList.add("liveplayer");var o=!0;this.theoplayerRef.addEventListener("progress",(function(){var e=this.seekable.end()-this.currentTime;o&&e>60&&(this.source=this.source)})),this.theoplayerRef.verizonMedia.ads.adBreaks.addEventListener("addadbreak",(function(e){e.adBreak.addEventListener("adbreakbegin",(function(){o=!1})),e.adBreak.addEventListener("adbreakend",(function(){o=!0}))}))}else n.classList.contains("liveplayer")&&n.classList.remove("liveplayer");return this.theoplayerRef.verizonMedia.addEventListener("assetinforesponse",(function(e){t.addMetadataToPlaylist(e.response)})),this.theoplayerRef.verizonMedia.ads.adBreaks.addEventListener("addadbreak",(function(e){t.adBreaks.push(e.adBreak)})),this.currentAsset=-1,this.theoplayerRef.addEventListener("timeupdate",(function(){t.updateActiveAsset()})),this.updateActiveQuality(this.theoplayerRef),this.subscribeToVerizonEvents(this.theoplayerRef),this.updateFeatures(e),this.theoplayerRef.source=r,this.playerRef}},{key:"isLiveStream",value:function(e){return e.sources.assetType&&("channel"==e.sources.assetType||"event"==e.sources.assetType)}},{key:"updateActiveAsset",value:function(){var e=this.getActiveAsset();e&&e.index!=this.currentAsset&&(this.currentAsset=e.index,m.updateActiveItem(e),document.querySelector("#currentAssetDescription").innerText=e.resource.description)}},{key:"addMetadataToPlaylist",value:function(e){var t=this,a=this.app,n=this.theoplayerRef.verizonMedia.assets;this.playlist.length>0?e.startTime=n[this.playlist.length].startTime:e.startTime=0,e.clickCallback=function(){t.theoplayerRef.currentTime=e.startTime},this.playlist.push(e),m.addItem(e,a.sourceIndex,i.slug(a.appConfig.tabs[a.sourceIndex].name))}},{key:"getSource",value:function(e){return{sources:this.app.appConfig.tabs[e].source}}},{key:"updateSkipOffset",value:function(e){for(var t=0;t<this.adBreaks.length;t++)this.adBreaks[t].skipOffset=e}},{key:"getActiveAsset",value:function(){for(var e,t=this.theoplayerRef.currentTime,a=this.theoplayerRef.verizonMedia.assets,n=0;n<a.length;n++){var i=a[n];i.startTime<=t&&t<=i.endTime&&(e={type:i.isAd?"adBreak":"asset",resource:i,index:n})}return e}},{key:"getFeatures",value:function(e){return this.app.appConfig.tabs[e].features}},{key:"createCustomIcon",value:function(e){var t=THEOplayer.videojs.getComponent("Button"),a=THEOplayer.videojs.extend(t,{constructor:function(){t.apply(this,arguments);var e=document.createElement("span");function a(){e.classList.toggle("vjs-hidden")}e.className="theo-button-tooltip vjs-hidden",e.innerText="Info",this.el().addEventListener("mouseover",a),this.el().addEventListener("mouseout",a),this.el().appendChild(e)},handleClick:function(){document.querySelector(".theoplayer-info").classList.toggle("hidden")},buildCSSClass:function(){return"fa fa-info vjs-button"}});THEOplayer.videojs.registerComponent("RewindButton",a),e.ui.getChild("controlBar").addChild("RewindButton",{})}},{key:"updateActiveQuality",value:function(e){var t=this;e.videoTracks.addEventListener("addtrack",(function(e){e.track.addEventListener("activequalitychanged",(function(e){document.querySelector("#currentVideoQuality").innerText=e.quality.height+" ("+e.quality.codecs+")",t.writeEvents(JSON.stringify(e))}))}))}},{key:"clearEvents",value:function(){document.querySelector("#theoplayer-events textarea").value=""}},{key:"writeEvents",value:function(e){document.querySelector("#theoplayer-events textarea").value=e+"\n"+document.querySelector("#theoplayer-events textarea").value}},{key:"subscribeToVerizonEvents",value:function(e){var t=this;["preplayresponse","pingresponse","assetinforesponse"].forEach((function(a){e.verizonMedia.addEventListener(a,(function(e){t.writeEvents(JSON.stringify(e))}))})),["addasset","removeasset"].forEach((function(a){e.verizonMedia.assets.addEventListener(a,(function(e){t.writeEvents(JSON.stringify(e))}))})),["addadbreak","removeadbreak"].forEach((function(a){e.verizonMedia.ads.adBreaks.addEventListener(a,(function(e){if(t.writeEvents(JSON.stringify(e)),"addadbreak"==e.type){["adbreakbegin","adbreakend","adbreakskip","updateadbreak"].forEach((function(a){e.adBreak.addEventListener(a,(function(e){t.writeEvents(JSON.stringify(e))}))}));for(var a=function(a){["adbegin","adend","adfirstquartile","admidpoint","adthirdquartile","adcomplete"].forEach((function(n){e.adBreak.ads[a].addEventListener(n,(function(e){t.writeEvents(JSON.stringify(e))}))}))},n=0;n<e.adBreak.ads.length;n++)a(n)}}))}))}},{key:"updateFeatures",value:function(e){var t=this.getFeatures(e),a=document.querySelector("#theoplayer-verizon-features");a.innerHTML="";for(var n=0;n<t.length;n++){var i=document.createElement("span");i.className="badge badge-pill badge-primary",i.innerText=t[n],a.appendChild(i)}}},{key:"createTHEOplayerInfo",value:function(e){e.innerHTML='<div class="theoplayer-info hidden">\n                        <div class="card">\n                            <div class="card-header" style="color: #212529">\n                                <span id="currentAssetDescription"></span> &nbsp; <i class="fa fa-video"></i> <span id="currentVideoQuality"></span>\n                            </div>\n                            <div class="card-body" id="theoplayer-events">\n                                <h5 class="card-title">Events</h5>\n                                <p class="card-text">\n                                      <textarea class="">\n                                      </textarea>\n                                </p>\n                            </div>\n                            <div class="card-footer text-muted" id="theoplayer-verizon-features">\n                            </div>\n                        </div>\n                    </div>'}}])&&g(t.prototype,a),n&&g(t,n),e}(),b=b||{language:"en",tabs:[{name:"Multi-Asset DRM",source:{integration:"verizon-media",id:["e973a509e67241e3aa368730130a104d","e70a708265b94a3fa6716666994d877d"],contentProtected:!0,assetType:"asset",preplayParameters:{}},features:["Preplay","Asset Info","DRM","Multi-Asset"],config:{general:["coming-up-notification","show-asset-markers"],queue:!0},experimental:["preview-thumbnails"]},{name:"Ads",source:{integration:"verizon-media",id:["41afc04d34ad4cbd855db52402ef210e","c6b61470c27d44c4842346980ec2c7bd","588f9d967643409580aa5dbe136697a1","b1927a5d5bd9404c85fde75c307c63ad","7e9932d922e2459bac1599938f12b272","a4c40e2a8d5b46338b09d7f863049675","bcf7d78c4ff94c969b2668a6edc64278"],contentProtected:!1,assetType:"asset",preplayParameters:{ad:"adtest","ad.lib":"15_sec_spots"}},features:["Preplay","Asset Info","Ads","Multi-Asset","SSAI"],config:{general:["coming-up-notification","ad-notification","show-asset-markers","show-ad-break-markers"],"skip-offset":"-1","seek-over-ad":"play-all",queue:!0}},{name:"Live",source:{integration:"verizon-media",assetType:"channel",id:"3c367669a83b4cdab20cceefac253684",preplayParameters:{ad:"cleardashnew"},playbackUrlParameters:{},ping:{adImpressions:!1,freeWheelVideoViews:!1,linearAdData:!0},contentProtected:!0},features:["Preplay","Ping","Asset Info","DRM","Ads","SSAI"],config:{general:["coming-up-notification"],queue:!1}}]};function k(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var w=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sourceIndex=0,this.playerUtil=new y(this),this.firstLoad=!1,this.appConfig=b,this.config={verizon:{contentNotification:!0,adNotification:!0,assetMarkers:!0,adBreakMarkers:!0,seekOverAd:"play-all",defaultSkipOffset:-1}}}var t,a,n;return t=e,(a=[{key:"init",value:function(){this.firstLoad||(this.firstLoad=!0,this.appModal=new v(this)),c.createAll(this.appConfig.tabs),this.bindControls(),f.localizeAppAppCopyright(this,this.appConfig.language),this.playerUtil.initPlayer(0)}},{key:"reset",value:function(){for(var e=this.appConfig.tabs,t=[],a=[],n=[],r=0;r<e.length;r++){var o=e[r].config,s=i.slug(e[r].name);o.general.indexOf("coming-up-notification")>-1&&t.push(s+"_contentNotification"),o.general.indexOf("ad-notification")>-1&&t.push(s+"_adNotification"),o.general.indexOf("show-asset-markers")>-1&&t.push(s+"_assetMarkers"),o.general.indexOf("show-ad-break-markers")>-1&&t.push(s+"_adBreakMarkers"),o["skip-offset"]&&a.push(s+"_skipOffset"),o["seek-over-ad"]&&n.push(s+"_optionsRadios1")}t.forEach((function(e){document.getElementById(e).checked=!0})),a.forEach((function(e){document.getElementById(e).value=-1})),n.forEach((function(e){document.getElementById(e).checked=!0})),this.config.verizon.contentNotification=!0,this.config.verizon.adNotification=!0,this.config.verizon.assetMarkers=!0,this.config.verizon.adBreakMarkers=!0,this.config.verizon.seekOverAd="play-all",this.config.verizon.defaultSkipOffset=-1}},{key:"bindControls",value:function(){for(var e=this,t=document.querySelectorAll("#myTab a"),a=0;a<t.length;a++)t[a].onclick=function(t){e.reset();var a=t.target.dataset.index;e.sourceIndex!==a&&(e.sourceIndex=a,e.playerUtil.initPlayer(a))};for(var n=document.forms[0].optionsRadios,r=0;r<n.length;r++)n[r].addEventListener("change",(function(t){e.config.verizon.seekOverAd=t.srcElement.value,e.playerUtil.initPlayer(e.sourceIndex)}));for(var o=0;o<e.appConfig.tabs.length;o++){var s=document.getElementById(i.slug(e.appConfig.tabs[o].name)+"_skipOffset");s&&s.addEventListener("change",(function(t){var a=parseInt(t.target.value),n=parseInt(t.target.max);a<0&&(t.target.value=-1),a>n&&(t.target.value=n),e.config.verizon.defaultSkipOffset=a||-1,e.playerUtil.updateSkipOffset(e.config.verizon.defaultSkipOffset)}))}for(var l=document.querySelectorAll('#myTabContent input[type="checkbox"]'),d=0;d<l.length;d++)l[d].onclick=function(t){e.config.verizon[t.target.dataset.verizonconfig]=t.srcElement.checked,e.playerUtil.initPlayer(e.sourceIndex)};for(var c=document.getElementsByClassName("reset_demo"),u=0;u<c.length;u++)c[u].onclick=function(){e.reset(),e.playerUtil.initPlayer(e.sourceIndex)}}}])&&k(t.prototype,a),n&&k(t,n),e}();window.App=w}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,